FROM eclipse-temurin:17 AS builder
LABEL authors="limvik"

WORKDIR workspace
ARG JAR_FILE=build/libs/*.jar
COPY ${JAR_FILE} econome.jar
RUN java -Djarmode=layertools -jar econome.jar extract
# 디렉토리별로 jar 파일 및 class 파일의 목록 생성
RUN find ./dependencies -type f -name '*.jar' -exec echo -n {}: \; > classpath.info && \
    find ./spring-boot-loader -type f \( -name '*.jar' -or -name '*.class' \) -exec echo -n {}: \; >> classpath.info && \
    find ./snapshot-dependencies -type f -name '*.jar' -exec echo -n {}: \; >> classpath.info && \
    find ./application -type f \( -name '*.jar' -or -name '*.class' \) -exec echo -n {}: \; >> classpath.info
#jdeps를 이용한 의존성 분석
RUN $JAVA_HOME/bin/jdeps \
    # 재귀적으로 모든 run-time dependencies 분석
    --recursive \
    # Missing dependencies 관련 error 출력 제거 \
    --ignore-missing-deps \
    # jlink --add-modules option에서 사용할 수 있도록 modules를 ','로 구분한 형태로 출력
    --print-module-deps \
    # Multi-Release JAR 파일이 있는 경우 17버전 기준으로 의존성 분석
    --multi-release 17 \
    # class-path 지정
    --class-path $(cat classpath.info) \
    # 의존성 분석 path 지정 및 분석 결과 저장
    ./ > jre-deps.info
#jlink를 이용한 Custom JRE 생성
RUN $JAVA_HOME/bin/jlink \
    # 필요한 modules 추가
    --add-modules "$(cat jre-deps.info),java.management.rmi,java.prefs,java.se,java.security.sasl,java.xml.crypto,jdk.management,jdk.crypto.ec" \
    # 출력에서 debug information 제거
    --strip-debug \
    # man pages 제외
    --no-man-pages \
    # header files 제외
    --no-header-files \
    # 모든 resources를 ZIP으로 압축
    --compress=2 \
    # runtime image 생성 위치
    --output /javaruntime

# Base Image 지정
FROM debian:buster-slim
RUN useradd limvik
USER limvik
# Java 환경변수 설정
ENV JAVA_HOME=/opt/java/openjdk
ENV PATH "${JAVA_HOME}/bin:${PATH}"
# Custom JRE 복사
COPY --from=builder /javaruntime $JAVA_HOME
WORKDIR workspace
COPY --from=builder workspace/dependencies/ ./
COPY --from=builder workspace/spring-boot-loader/ ./
COPY --from=builder workspace/snapshot-dependencies/ ./
COPY --from=builder workspace/application/ ./
ENTRYPOINT ["java", "org.springframework.boot.loader.JarLauncher"]